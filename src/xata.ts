// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "classes",
    columns: [
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "New class",
      },
      { name: "count", type: "int", notNull: true, defaultValue: "0" },
      { name: "memberId", type: "string", notNull: true, defaultValue: "0" },
    ],
    revLinks: [{ column: "classes", table: "group" }],
  },
  {
    name: "group",
    columns: [
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "New group",
      },
      { name: "count", type: "int", notNull: true, defaultValue: "0" },
      { name: "classes", type: "link", link: { table: "classes" } },
      { name: "member", type: "link", link: { table: "member" } },
    ],
    revLinks: [
      { column: "group", table: "student" },
      { column: "group", table: "attendance" },
    ],
  },
  {
    name: "student",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "Name" },
      {
        name: "surname",
        type: "string",
        notNull: true,
        defaultValue: "Surname",
      },
      { name: "group", type: "link", link: { table: "group" } },
    ],
    revLinks: [{ column: "student", table: "attendance" }],
  },
  {
    name: "attendance",
    columns: [
      { name: "student", type: "link", link: { table: "student" } },
      { name: "isPresent", type: "bool", notNull: true, defaultValue: "false" },
      { name: "date", type: "datetime", notNull: true, defaultValue: "now" },
      { name: "group", type: "link", link: { table: "group" } },
    ],
  },
  {
    name: "member",
    columns: [
      { name: "memberId", type: "string", notNull: true, defaultValue: "0" },
    ],
    revLinks: [{ column: "member", table: "group" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Classes = InferredTypes["classes"];
export type ClassesRecord = Classes & XataRecord;

export type Group = InferredTypes["group"];
export type GroupRecord = Group & XataRecord;

export type Student = InferredTypes["student"];
export type StudentRecord = Student & XataRecord;

export type Attendance = InferredTypes["attendance"];
export type AttendanceRecord = Attendance & XataRecord;

export type Member = InferredTypes["member"];
export type MemberRecord = Member & XataRecord;

export type DatabaseSchema = {
  classes: ClassesRecord;
  group: GroupRecord;
  student: StudentRecord;
  attendance: AttendanceRecord;
  member: MemberRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Temirlan-s-workspace-qp9hc0.eu-central-1.xata.sh/db/katysu",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
